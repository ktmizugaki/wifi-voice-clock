/* Copyright 2021 Kawashima Teruaki
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include <stdbool.h>
#include <stdint.h>
#include <esp_err.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @file
 * simple implementaion of playing audio data.
 */

/**
 * @brief user defined function to get audio data and notify play is done.
 * * this audio system calls this function to request audio data from user.
 * * this audio system also calls this function to notify play is done to user
 *   by setting data and size to NULL. User may release associated resources,
 *   including arg it's self, here.
 * @note play done notification is always sent exactly once for each @ref audio_play call,
 *       while audio data may not be requested at all e.g.
 *       when audio was stopped while the play is in queue.
 * @note user must check whether data is NULL or not.
 * @param[in] arg       user specifed pointer passed to @ref audio_play.
 * @param[in,out] data  pointer to buffer where the function should fill with
 *                      audio data when audio system requests audio data.
 *                      or NULL when audio system notifies play is done.
 * @param[in,out] size  size of buffer pointed by data. and size of data copied to buffer.
 *                      the function must update the size to size of data copied to the buffer.
 * @return 0 to indicate this is last chunk and there is no more audio data.
 *         1 to indicate there is remaining audio data.
 */
typedef int (*audio_data_func_t)(void *arg, void *data, int *size);

/** queueing mode when @ref audio_play */
typedef enum {
    AUDIO_ENQUEUE,
    AUDIO_REPLACE,
    AUDIO_IMMEDIATE,
} audio_queue_mode_t;

/**
 * @brief initialize audio system and I2S hardware.
 * @return ESP_OK for success, other value for error.
 */
extern esp_err_t audio_init(void);
/**
 * @brief play sine wave of specified frequency and duration.
 * this function may block if there is too many queueing audio.
 * @param[in] frequency frequency of sine wave.
 * @param[in] duration  duration in msec.
 */
extern void audio_beep(int frequency, int duration);
/**
 * @brief play audio data generated by callback function.
 * this function may block if there is too many queueing audio.
 * @param[in] callback  callback function. see @ref audio_data_func_t for detail.
 * @param[in] arg       pointer passed to callback.
 * @param[in] samplerate sampling rate of which callback function would generate.
 * @param[in] channels  number of channels of which callback function would generate. must be 1.
 * @param[in] bits      bits per sample of which callback function would generate. must be 8 or 16.
 * @param[in] mode      queueing mode.
 */
extern void audio_play(audio_data_func_t callback, void *arg,
    int samplerate, int channels, int bits,
    audio_queue_mode_t mode);
/**
 * @brief stop all playing and queueing audio and wait.
 * this function does not return until all audio released.
 */
extern void audio_stop(void);
/**
 * @brief wait for finish playing.
 */
extern void audio_wait(void);
/**
 * @brief return true if audio is playing.
 */
extern bool audio_is_playing(void);

/**
 * @brief helper function to convert duration to number of bytes.
 * @param[in] duration  duration in msec.
 * @param[in] samplerate sampling rate.
 * @param[in] channel   number of channels.
 * @param[in] bits      bits per sample.
 * @return number of bytes.
 */
static inline int64_t duration_to_bytes(int duration, int samplerate, int channels, int bits)
{
    return (int64_t)duration*samplerate/1000*channels*bits/8;
}

/**
 * @brief helper function to convert number of bytes duration.
 * @param[in] bytes     number of bytes.
 * @param[in] samplerate sampling rate.
 * @param[in] channel   number of channels.
 * @param[in] bits      bits per sample.
 * @return duration in msec.
 */
static inline int bytes_to_duration(int64_t bytes, int samplerate, int channels, int bits)
{
    return bytes*1000/samplerate/channels/bits*8;
}

#ifdef __cplusplus
}
#endif
